# ═══════════════════════════════════════════════════════════
# 🚀 COMMANDES RAPIDES - ÉTAPES 10 & 11
# ═══════════════════════════════════════════════════════════

# ─────────────────────────────────────────────────────────────
# 1️⃣ CRÉER LES INDEX SQL (dans chaque base)
# ─────────────────────────────────────────────────────────────

psql -h localhost -p 5432 -U dsms_user -d ventes_dakar -f optimization_indexes.sql
psql -h localhost -p 5432 -U dsms_user -d ventes_thies -f optimization_indexes.sql
psql -h localhost -p 5432 -U dsms_user -d ventes_stlouis -f optimization_indexes.sql

# ─────────────────────────────────────────────────────────────
# 2️⃣ REDÉMARRER L'APPLICATION
# ─────────────────────────────────────────────────────────────

# Arrêter : Ctrl+C
mvn clean spring-boot:run

# ─────────────────────────────────────────────────────────────
# 3️⃣ TESTER LES FONCTIONNALITÉS
# ─────────────────────────────────────────────────────────────

# Page principale avec stats rapides
http://localhost:8080

# Tableau de bord complet
http://localhost:8080/stats

# API JSON des statistiques
http://localhost:8080/api/stats

# ─────────────────────────────────────────────────────────────
# 🧪 COMMANDES DE VÉRIFICATION
# ─────────────────────────────────────────────────────────────

# Vérifier les index créés
psql -U dsms_user -d ventes_dakar -c "SELECT indexname FROM pg_indexes WHERE tablename = 'vente';"

# Voir les statistiques d'utilisation des index
psql -U dsms_user -d ventes_dakar -c "SELECT indexname, idx_scan FROM pg_stat_user_indexes WHERE tablename = 'vente';"

# Tester les performances (EXPLAIN)
psql -U dsms_user -d ventes_dakar -c "EXPLAIN ANALYZE SELECT * FROM vente WHERE deleted = false ORDER BY updated_at DESC;"

# ─────────────────────────────────────────────────────────────
# 🔧 COMMANDES DE DEBUG
# ─────────────────────────────────────────────────────────────

# Voir les logs en temps réel (PowerShell)
Get-Content -Path "logs/spring.log" -Wait | Select-String "Synchronisation"

# Monitorer les stats en continu (PowerShell)
while($true) { curl http://localhost:8080/api/stats; Start-Sleep 5 }

# ─────────────────────────────────────────────────────────────
# ⚠️ SIMULATION DE PANNE
# ─────────────────────────────────────────────────────────────

# Arrêter une base (PowerShell Admin)
Stop-Service postgresql-x64-14

# Observer les logs → Devrait montrer: ❌ Erreur connexion à Thies

# Redémarrer la base
Start-Service postgresql-x64-14

# Observer la récupération → Devrait montrer: ✅ Thies récupérée

# ═══════════════════════════════════════════════════════════
# ✅ VALIDATION RAPIDE
# ═══════════════════════════════════════════════════════════

# Si tout fonctionne, vous devriez voir :
# ✅ http://localhost:8080 → Panneau stats en haut
# ✅ http://localhost:8080/stats → Tableau de bord complet
# ✅ Console → Logs avec ✅/❌
# ✅ EXPLAIN → Index Scan (pas Seq Scan)

# ═══════════════════════════════════════════════════════════
